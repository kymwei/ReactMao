ReactDOM.render(React.createElement(
    'h1',
    null,
    'Do you know what Mr.Mao like to eat?'
), document.getElementById('example'));

var CommentBox = React.createClass({
    displayName: 'CommentBox',

    loadCommentsFromServer: function () {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function (data) {
                this.setState({ data: data.message });
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentSubmit: function (comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.password = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments });
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function (data) {
                this.setState({ data: data.message });
            }.bind(this),
            error: function (xhr, status, err) {
                this.setState({ data: comments });
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function () {
        return { data: [] };
    },
    componentDidMount: function () {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function () {
        return React.createElement(
            'div',
            { className: 'commentBox' },
            React.createElement(
                'h1',
                null,
                'Comments'
            ),
            React.createElement(CommentList, { data: this.state.data }),
            React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
        );
    }
});

var CommentList = React.createClass({
    displayName: 'CommentList',

    render: function () {
        var commentNodes = this.props.data.map(function (comment) {
            return React.createElement(
                Comment,
                { author: comment.food, key: comment._id },
                comment.stars
            );
        });
        return React.createElement(
            'div',
            { className: 'commentList' },
            commentNodes
        );
    }
});

var CommentForm = React.createClass({
    displayName: 'CommentForm',

    getInitialState: function () {
        return { food: '', stars: '' };
    },
    handleAuthorChange: function (e) {
        this.setState({ food: e.target.value });
    },
    handleTextChange: function (e) {
        this.setState({ stars: e.target.value });
    },
    handleSubmit: function (e) {
        e.preventDefault();
        var food = this.state.food.trim();
        var stars = this.state.stars.trim();
        if (!stars || !food) {
            return;
        }
        // TODO: send request to the server
        this.props.onCommentSubmit({ food: food, stars: stars });
        this.setState({ food: '', stars: '' });
    },
    render: function () {
        return React.createElement(
            'form',
            { className: 'commentForm', onSubmit: this.handleSubmit },
            React.createElement('input', {
                type: 'text',
                placeholder: 'Food Name',
                value: this.state.food,
                onChange: this.handleAuthorChange
            }),
            React.createElement('input', {
                type: 'text',
                placeholder: 'how much mao rate for this food...',
                value: this.state.stars,
                onChange: this.handleTextChange
            }),
            React.createElement('input', { type: 'submit', value: 'Post' })
        );
    }
});

// prevent xxs attach

var Comment = React.createClass({
    displayName: 'Comment',

    rawMarkup: function () {
        var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
        return { __html: rawMarkup };
    },
    render: function () {
        return React.createElement(
            'div',
            { className: 'comment' },
            React.createElement(
                'h2',
                { className: 'commentAuthor' },
                this.props.author
            ),
            React.createElement('span', { dangerouslySetInnerHTML: this.rawMarkup() })
        );
    }
});

var fakedata = [{ id: 1, author: "Pete Hunt", text: "This is one comment" }, { id: 2, author: "Jordan Walke", text: "This is *another* comment" }];

ReactDOM.render(
// <CommentBox data={data} />,
React.createElement(CommentBox, { url: '/foods', pollInterval: 3000 }), document.getElementById('content'));